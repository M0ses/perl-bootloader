#!/bin/bash
#
# This script represents an interface between the postinstall and postuninstall
# scripts of kernel rpms and the update-bootloader script.
# 
# Interface:
# ----------
# /usr/lib/bootloader/bootloader_entry [add|remove] <kernel-flavor> <kernel-release> <image-name> <initrd-name>
#
# Call Semantics:
# ---------------
# [ -x $cmd ] && $cmd <parameters>
#
#
# Author: aosthof@suse.de
#


# Print how to use this script correctly
function usage()
{
	echo "Unknown or missing parameter."
	echo "Usage: $0 [add|remove] <kernel-flavor> <kernel-release> <image-name> <initrd-name>"
	echo
	echo "The old interface with 4 parameters is still supported, but deprecated."
	echo "This interface will be dropped in the near future."
	echo "Usage: $0 [add|remove] <kernel-package-name> <image-name> <initrd-name>"
	exit 1
}


# Get all command line arguments
function getargs()
{
	# old interface with 4 parameters
	if [ $# -eq 4 ] ; then
		action=${1}		# contains the action to be executed, e.g. "add" or "remove"
		flavor=${2#*-}		# contains the kernel-flavor, e.g. "default" or "xen"
		flavor=${flavor%%-*}
		release=${2#*-*-}	# contains the kernel-release, e.g. "2.6.18-4-default"
		release=${release%.*.*}
		release="${release}-${flavor}"
		image=${3}		# contains the full image name, e.g. "vmlinuz-2.6.18-4-default"
		initrd=${4}		# contains the full initrd name, e.g. "initrd-2.6.18-4-default"
		
	# new interface with 5 parameters
	else
		action=${1}		# contains the action to be executed, e.g. "add" or "remove"
		flavor=${2}		# contains the kernel-flavor, e.g. "default" or "xen"
		release=${3}		# contains the kernel-release, e.g. "2.6.18-4-default"
		image=${4}		# contains the full image name, e.g. "vmlinuz-2.6.18-4-default"
		initrd=${5}		# contains the full initrd name, e.g. "initrd-2.6.18-4-default"
	fi
}


# Wrapper for the update-bootloader function
function update_bootloader() 
{
        echo "bootloader_entry: This is (wrapper) function update_bootloader" >> $logname

	[ -x /sbin/update-bootloader ] || return 0
	    # call update-bootloader and also append stderr to the log file
	    ((/sbin/update-bootloader "$@") 3>&1 1>&2 2>&3 3>&- | tee -a \
	    $logname ) 3>&1 1>&2 2>&3 3>&-
}


##############################
# Add a new bootloader entry #
##############################
function add_entry()
{
        echo "bootloader_entry: This is function add_entry()" >> $logname

	# Set up the new kernel
        if [ -f /etc/sysconfig/bootloader ] &&
           [ -f /boot/grub/menu.lst -o \
             -f /etc/lilo.conf      -o \
             -f /etc/elilo.conf     -o \
             -f /etc/zipl.conf ]; then
                case $flavor in
			(kdump|um)
			;;
			(xen*)
				opt_xen_kernel=
				set -- $flavor
				set -- ${1#xen}
				opt_xen_kernel=--xen-kernel=/boot/xen${1:+-$1}.gz

				# Add the new bootloader entry (xen kernel)
				update_bootloader --image /boot/$image \
						  --initrd /boot/$initrd \
						  --default \
						  --add \
						  --force $opt_xen_kernel \
						  --name "$release"

				# Run the bootloader (e.g., lilo).
				update_bootloader --refresh
			;;			
			
			(debug)
				# Add the new bootloader entry (debug kernel)
				update_bootloader --image /boot/$image \
						  --initrd /boot/$initrd \
						  --add \
						  --force \
						  --name "$release"

				# Run the bootloader (e.g., lilo).
				update_bootloader --refresh
			;;

			(*)
				# Add the new bootloader entry
				update_bootloader --image /boot/$image \
						  --initrd /boot/$initrd \
						  --default \
						  --add \
						  --force \
						  --name "$release"

				# Run the bootloader (e.g., lilo).
				update_bootloader --refresh
			;;
		esac
	fi
}


#######################################
# Remove an existing bootloader entry #
#######################################
function remove_entry()
{
	# Do not specify the name of a bootloader entry when removing it, thus
	# removing all sections matching the kernel image and initrd names
	# (either both a "linux" and a "failsafe" section, or a section
	# installed with the kernel postinstall script).
	#
	# Rationale: we do not know whether the old entry has
	#    - the product name as its name (when installed with
	#      yast-bootloader) or
	#    - "Kernel-<version>" (when installed with the kernel package's
	#       postinstall script and perl-Bootloader).
	#
	#  So we cannot use the name to find the correct section.
	#  This is safe, because on grub, this does still not match other 
	#  sections on other partitions with the same name for the kernel
	#  image and initrd (because they will still have the (hdx,y) prefix
	#  in perl-Bootloader). Other bootloaders do not specify other
	#  sections at all, or do only chainload them (BootLILO.ycp), and
	#  thus do not match either. (#223030)

        echo "bootloader_entry: This is function remove_entry()" >> $logname

	if [ $flavor == "xen" ]; then
		update_bootloader --image /boot/$image \
				  --initrd /boot/$initrd \
				  --xen \
				  --remove \
				  --force
	else
		update_bootloader --image /boot/$image \
				  --initrd /boot/$initrd \
				  --remove \
				  --force
	fi

	# Run the bootloader (e.g., lilo).
	update_bootloader --refresh
}



#####################  M A I N  ###############################################

# Log how program was called
logname="/var/log/YaST2/perl-BL-standalone-log"
echo "bootloader_entry was called as: $*" >> $logname

# Log parts of the current system configuration
(
echo "/proc/mounts:"
cat /proc/mounts
echo "/sys:"
ls -l /sys
echo "excerpts of /dev:"
ls -l /dev/{[hs]d[ab]?,md[0-3],.udev}
device_map="/boot/grub/device.map"
if [ -e $device_map ] ; then
	echo "device.map:"
	cat $device_map
fi
) >> $logname

# Checks if correct amount of arguments is given
if [ "$#" -ne "4" -a "$#" -ne "5" ] ; then
	usage
fi

# Get all given arguments
getargs $@

# Find out which action should be executed
case $action in
	add)
		# Add a new bootloader entry
		add_entry
	;;
	remove) 
		# Remove an existing bootloader entry
		remove_entry
	;;
	*)
		# Unknown argument
		usage
	;;
esac

